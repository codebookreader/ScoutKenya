import os
import sys
import collections.abc as cabc
import typing as t
import weakref
from datetime import timedelta
from inspect import iscoroutinefunction
from itertools import chain
from types import TracebackType
from urllib.parse import quote as _url_quote

import click
from werkzeug.datastructures import Headers
from werkzeug.datastructures import ImmutableDict
from werkzeug.exceptions import BadRequestKeyError
from werkzeug.exceptions import HTTPException
from werkzeug.exceptions import InternalServerError
from werkzeug.routing import BuildError
from werkzeug.routing import MapAdapter
from werkzeug.routing import RequestRedirect
from werkzeug.routing import RoutingException
from werkzeug.routing import Rule
from werkzeug.serving import is_running_from_reloader
from werkzeug.wrappers import Response as BaseResponse
from werkzeug.wsgi import get_host

# Import libraries for Supabase and environment variables
from dotenv import load_dotenv
from supabase import create_client
from flask import jsonify, Flask, render_template

from . import cli
from . import typing as ft
from .ctx import AppContext
from .ctx import RequestContext
from .globals import _cv_app
from .globals import _cv_request
from .globals import current_app
from .globals import g
from .globals import request
from .globals import request_ctx
from .globals import session
from .helpers import get_debug_flag
from .helpers import get_flashed_messages
from .helpers import get_load_dotenv
from .helpers import send_from_directory
from .sansio.app import App
from .sansio.scaffold import _sentinel
from .sessions import SecureCookieSessionInterface
from .sessions import SessionInterface
from .signals import appcontext_tearing_down
from .signals import got_request_exception
from .signals import request_finished
from .signals import request_started
from .signals import request_tearing_down
from .templating import Environment
from .wrappers import Request
from .wrappers import Response

# The rest of your original code remains here...
# ...
if t.TYPE_CHECKING:  # pragma: no cover
    from _typeshed.wsgi import StartResponse
    from _typeshed.wsgi import WSGIEnvironment

    from .testing import FlaskClient
    from .testing import FlaskCliRunner
    from .typing import HeadersValue

T_shell_context_processor = t.TypeVar(
    "T_shell_context_processor", bound=ft.ShellContextProcessorCallable
)
T_teardown = t.TypeVar("T_teardown", bound=ft.TeardownCallable)
T_template_filter = t.TypeVar("T_template_filter", bound=ft.TemplateFilterCallable)
T_template_global = t.TypeVar("T_template_global", bound=ft.TemplateGlobalCallable)
T_template_test = t.TypeVar("T_template_test", bound=ft.TemplateTestCallable)


def _make_timedelta(value: timedelta | int | None) -> timedelta | None:
    if value is None or isinstance(value, timedelta):
        return value

    return timedelta(seconds=value)


class Flask(App):
    # ... (rest of your original Flask class definition)
    # ...
    default_config = ImmutableDict(
        {
            "DEBUG": None,
            "TESTING": False,
            "PROPAGATE_EXCEPTIONS": None,
            "SECRET_KEY": None,
            "SECRET_KEY_FALLBACKS": None,
            "PERMANENT_SESSION_LIFETIME": timedelta(days=31),
            "USE_X_SENDFILE": False,
            "TRUSTED_HOSTS": None,
            "SERVER_NAME": None,
            "APPLICATION_ROOT": "/",
            "SESSION_COOKIE_NAME": "session",
            "SESSION_COOKIE_DOMAIN": None,
            "SESSION_COOKIE_PATH": None,
            "SESSION_COOKIE_HTTPONLY": None
        })
    
# ---- START: Additions for Supabase and Flask ----
# Load environment variables from a .env file
load_dotenv()

# Set up the Supabase client using environment variables
SUPABASE_URL = os.environ.get("https://dkidnjhrravzbblzzygd.supabase.co")
SUPABASE_KEY = os.environ.get("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRraWRuamhycmF2emJibHp6eWdkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2ODIyMzMsImV4cCI6MjA3MzI1ODIzM30.P5-iHUFyy832O48LLXyTMiS9FZO_10YOZPZWxO_NrV4")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# Initialize your Flask app instance
app = Flask(__name__)

# A simple root route
@app.route("/")
def home():
    return render_template('index.html')

# A route to fetch and display data from a Supabase table
@app.route("/users")
def get_users():
    """
    Example route to fetch data from a 'users' table in Supabase.
    NOTE: A 'users' table must exist in your Supabase project for this to work.
    """
    try:
        # Fetch all data from the 'users' table
        response = supabase.table("users").select("*").execute()
        
        # Check for errors and return the data
        if response.data:
            return jsonify(response.data)
        else:
            return jsonify({"error": "No data found or table does not exist."}), 404
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Run the app
if __name__ == "__main__":
    # In a production environment, disable debug mode
    app.run(debug=True)

# ---- END: Additions for Supabase and Flask ----

